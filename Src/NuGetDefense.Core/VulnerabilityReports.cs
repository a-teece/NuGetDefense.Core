using System;
using System.Collections.Generic;
using System.Linq;

namespace NuGetDefense.Core
{
    public static class VulnerabilityReports
    {
        public static void ReportVulnerabilities(
            Dictionary<string, Dictionary<string, Vulnerability>> vulnerabilityDictionary,
            IEnumerable<NuGetPackage> pkgs, string nuGetFile, bool warnOnly, double cvss3Threshold)
        {
            foreach (var pkg in pkgs.Where(p =>
                p.LineNumber != null && vulnerabilityDictionary.ContainsKey(p.Id.ToLower())))
            {
                var vulnerabilities = vulnerabilityDictionary[pkg.Id.ToLower()];

                Console.WriteLine("*************************************");
                warnOnly = warnOnly ||
                           !vulnerabilities.Any(v => v.Value.CvssScore >= cvss3Threshold);
                var dependantVulnerabilities = pkg.Dependencies.Where(dep => vulnerabilityDictionary.ContainsKey(dep));
                Console.WriteLine(
                    $"{nuGetFile}({pkg.LineNumber},{pkg.LinePosition}) : {(warnOnly ? "Warning" : "Error")} : {vulnerabilities.Count} vulnerabilities found for {pkg.Id} @ {pkg.Version}");
                if (dependantVulnerabilities.Any())
                    Console.WriteLine(
                        $"{nuGetFile}({pkg.LineNumber},{pkg.LinePosition}) : {(warnOnly ? "Warning" : "Error")} : {dependantVulnerabilities.Count()} vulnerabilities found for dependencies of {pkg.Id} @ {pkg.Version}");

                foreach (var cve in vulnerabilities.Keys)
                {
                    warnOnly = warnOnly ||
                               vulnerabilities[cve].CvssScore <= cvss3Threshold;
                    Console.WriteLine(
                        $"{nuGetFile}({pkg.LineNumber},{pkg.LinePosition}) : {(warnOnly ? "Warning" : "Error")} : {cve}: {vulnerabilities[cve].Description}");
                    Console.WriteLine($"Description: {vulnerabilities[cve].Description}");
                    Console.WriteLine($"CVE: {cve}");
                    Console.WriteLine($"CWE: {vulnerabilities[cve].Cwe}");
                    Console.WriteLine($"CVSS Score: {vulnerabilities[cve].CvssScore}");
                    Console.WriteLine($"CVSS Vector: {vulnerabilities[cve].Vector}");
                    if (vulnerabilities[cve].References != null && vulnerabilities[cve].References.Any())
                    {
                        Console.WriteLine("References:");
                        foreach (var reference in vulnerabilities[cve].References) Console.WriteLine(reference);
                    }

                    Console.WriteLine("---------------------------");
                }

                foreach (var dependancy in dependantVulnerabilities)
                {
                    vulnerabilities = vulnerabilityDictionary[dependancy];
                    foreach (var cve in vulnerabilities.Keys)
                    {
                        warnOnly = warnOnly ||
                                   vulnerabilities[cve].CvssScore <= cvss3Threshold;
                        Console.WriteLine(
                            $"{nuGetFile}({pkg.LineNumber},{pkg.LinePosition}) : {(warnOnly ? "Warning" : "Error")} : {cve}: {dependancy}: {vulnerabilities[cve].Description}");
                        Console.WriteLine($"Description: {vulnerabilities[cve].Description}");
                        Console.WriteLine($"CVE: {cve}");
                        Console.WriteLine($"CWE: {vulnerabilities[cve].Cwe}");
                        Console.WriteLine($"CVSS Score: {vulnerabilities[cve].CvssScore}");
                        Console.WriteLine($"CVSS Vector: {vulnerabilities[cve].Vector}");
                        // if (vulnerabilities[cve].Version?.Length > 0)
                        //     Console.WriteLine($"Affected Version: {vulnerabilities[cve].Version}");
                        Console.WriteLine("---------------------------");
                    }
                }
            }
        }
    }
}