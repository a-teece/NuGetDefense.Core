using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using FluentAssertions;
using NuGetDefense;
using NuGetDefense.Core;
using Xunit;
using Xunit.Abstractions;

namespace CoreTests
{
    public class VulnerabilityDataTests
    {
        private readonly ITestOutputHelper _testOutputHelper;

        public VulnerabilityDataTests(ITestOutputHelper testOutputHelper)
        {
            _testOutputHelper = testOutputHelper;
        }

        [Fact]
        public void SaveLoadVulnerabilityData()
        {
            var testVulnDict = new Dictionary<string, Dictionary<string, VulnerabilityEntry>>
            {
                {
                    "Test",
                    new Dictionary<string, VulnerabilityEntry>
                    {
                        {
                            "CVE-Test",
                            new VulnerabilityEntry
                            {
                                Cwe = "Test-CWE",
                                Vector = Vulnerability.AccessVectorType.NETWORK,
                                Vendor = "Test Vendor",
                                Versions = new[] {"1.1.1", "1.2.5"},
                                Description = "Test Decsription",
                                References = new[] {"Test Referece"},
                                Score = 4.3
                            }
                        }
                    }
                }
            };

            Task.Run(() =>
            {
                Console.WriteLine("Locking File");
                using var file = File.Open("TestVulnerabilityData.bin", FileMode.Open, FileAccess.ReadWrite,
                    FileShare.None);
                Thread.Sleep(TimeSpan.FromSeconds(5));
                Console.WriteLine("Releasing File");
                file.Close();
            });
            Thread.Sleep(TimeSpan.FromSeconds(1));
            Console.WriteLine("Reading File");
            VulnerabilityData.SaveToBinFile(testVulnDict, "TestVulnerabilityData.bin", TimeSpan.FromSeconds(10));
            testVulnDict.Should().BeEquivalentTo(VulnerabilityData.LoadFromBinFile("TestVulnerabilityData.bin"));
        }
    }
}